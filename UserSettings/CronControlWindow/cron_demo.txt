10 14 * * MON,TUE,WED,THU,FRI python3 /home/ruairi/Cron_O_Clock/Cron_O_Clock/AlarmWindow/CronOlarm.py  --image coffee.png --message "This is a test message" --displaytime 10

0 11 * * * python3 /home/ruairi/Cron_O_Clock/Cron_O_Clock/AlarmWindow/CronOlarm.py --image alarm.png --message "Test Alarm" --displaytime 10


This is a test string for testing the cron log AlarmWindow

What is the Syntax of Linux Crontab?

The Linux Crontab Format is represented by the following syntax:

MIN HOUR DOM MON DOW CMD

Let's break down each field and discuss as follows:

Field
	

Description
	

Allowed Value

MIN (Minute)
	

Specifies the minute when the command will run
	

It ranges from 0 to 59.

HOUR
	

Denotes the hour of the day when the command is scheduled to execute.
	

It spans from 0 to 23.

DOM (Day of Month)
	

Specifies the day of the month for the task.
	

It ranges from 1 to 31.

MON (Month)
	

Indicates the month during which the command will be executed.
	

It varies from 1 to 12.

DOW (Day of Week)
	

Specifies the day of the week for the task.
	

It is represented by numbers from 0 to 7, where both 0 and 7 correspond to Sunday.

CMD (Command)
	

Represents the actual command or script that will run at the scheduled time.
	

-----------------
How Linux Crontab Works?

Crontab functions by enabling the users to program their tasks or commands that assist in running automatically at given times and intervals. The following are the points that describe how the crontab will function:

    Crontab Configuration: Any user on a Linux server can have their crontab file that assists in listing the commands or scripts to be run as their schedule.
    Time Specification: It has operands that specify the time when the tasks need to be executed. Its time operands are the fields that represent the minute, hour, day of the month, month, and day of the week.
    Scheduled Execution: The cron daemon (cron) will repeatedly scan crontab files to see if there are any scheduled jobs matching the current time. When it finds a match, it runs the given command or script.
    Logging and Notifications: The output of cron jobs is usually emailed to the user's email address by default. Users can send output to files or turn off email notices whenever necessary.
    System-wide and User-specific: System administrators configure system-wide cron jobs in /etc/crontab and /etc/cron.d/, while individual users control their tasks using the crontab -e command to modify their crontab files.

What are Some Usage and Examples of Linux Crontab Jobs?

The following are some examples of cron jobs:
1. Scheduling a Job For a Specific Time:

    The basic usage of cron is to execute a job in a specific time as shown below. This will execute the Full backup shell script (full-backup) on 10th June at 08:30 AM.
    The time field uses 24 hours format. So, for 8 AM use 8, and 8 PM use 20.

30 08 10 06 * /home/maverick/full-backup

    30 – 30th Minute 08 – 08 AM 10 – 10th Day 06 – 6th Month (June) * – Every day of the week 

2. To View the Crontab entries:

    View Current Logged-In User’s Crontab entries: To view your crontab entries type crontab -l from your Unix account. 